library(ggplot2)
rm(list = ls())
setwd("D:\\R\\Intro to R/Video 2/")
# VARIABLE DESCRIPTIONS:
#   survival        Survival
# (0 = No; 1 = Yes)
# pclass          Passenger Class
# (1 = 1st; 2 = 2nd; 3 = 3rd)
# name            Name
# sex             Sex
# age             Age
# sibsp           Number of Siblings/Spouses Aboard
# parch           Number of Parents/Children Aboard
# ticket          Ticket Number
# fare            Passenger Fare
# cabin           Cabin
# embarked        Port of Embarkation
# (C = Cherbourg; Q = Queenstown; S = Southampton)
#
# SPECIAL NOTES:
#   Pclass is a proxy for socio-economic status (SES)
# 1st ~ Upper; 2nd ~ Middle; 3rd ~ Lower
#
# Age is in Years; Fractional if Age less than One (1)
# If the Age is Estimated, it is in the form xx.5
#
# With respect to the family relation variables (i.e. sibsp and parch)
# some relations were ignored.  The following are the definitions used
# for sibsp and parch.
#
# Sibling:  Brother, Sister, Stepbrother, or Stepsister of Passenger Aboard Titanic
# Spouse:   Husband or Wife of Passenger Aboard Titanic (Mistresses and Fiances Ignored)
# Parent:   Mother or Father of Passenger Aboard Titanic
# Child:    Son, Daughter, Stepson, or Stepdaughter of Passenger Aboard Titanic
#
# Other family relatives excluded from this study include cousins,
# nephews/nieces, aunts/uncles, and in-laws.  Some children travelled
# only with a nanny, therefore parch=0 for them.  As well, some
# travelled with very close friends or neighbors in a village, however,
# the definitions do not support such relations.
train <- read.csv(file = "train.csv", header = TRUE, stringsAsFactors = TRUE)
test <- read.csv(file = "test.csv", header = TRUE, stringsAsFactors = TRUE)
# Note :- Created the survived as List of All the data in test data frame
survived <- rep("None", nrow(test))
# Append the Survived Column as there is new column PassengerId is there on first
# column in train and test data frame.
test <- as.data.frame(append(test, list(Survived = survived), after = 1))
rm(survived)
data.combine <- rbind(train, test)
data.combine$Survived <- factor(data.combine$Survived)
data.combine$Pclass <- as.factor(data.combine$Pclass)
str(data.combine)
table(data.combine$Survived)
table(data.combine$Pclass)
train$Pclass <- factor(train$Pclass)
?ggplot
ggplot(train, aes(x = Pclass, fill = factor(Survived))) +
geom_bar(width = 0.5) +
xlab("Pclass") +
ylab("Total count") +
labs(fill = "Survived")
# Examine the first few names in the training data set
str(train)
head(as.character(train$Name))
# How many unique names are there across both train & test?
length(unique(as.character(data.combine$Name)))
# Two duplicate names, take a closer look
# First, get the duplicate names and store them as a vector
dup.names <- as.character(data.combine[which(duplicated(as.character(data.combine$Name))), "Name"])
dup.names
# Next, take a look at the records in the combined data set
data.combine[which(data.combine$Name %in% dup.names),]
# What is up with the 'Miss.' and 'Mr.' thing?
library(stringr)
# Any correlation with other variables (e.g., sibsp)?
misses <- data.combine[which(str_detect(data.combine$Name, "Miss.")),]
misses[1:5,]
# Hypothesis - Name titles correlate with age
mrses <- data.combine[which(str_detect(data.combine$Name, "Mrs.")), ]
mrses[1:5,]
# Check out males to see if pattern continues
males <- data.combine[which(train$Sex == "male"), ]
males[1:5,]
# Expand upon the realtionship between `Survived` and `Pclass` by adding the new `Title` variable to the
# data set and then explore a potential 3-dimensional relationship.
# Create a utility function to help with title extraction
# NOTE - Using the grep function here, but could have used the str_detect function as well.
extractTitle <- function(name) {
name <- as.character(name)
if (length(grep("Miss.", name)) > 0) {
return ("Miss.")
} else if (length(grep("Master.", name)) > 0) {
return ("Master.")
} else if (length(grep("Mrs.", name)) > 0) {
return ("Mrs.")
} else if (length(grep("Mr.", name)) > 0) {
return ("Mr.")
} else {
return ("Other")
}
}
# NOTE - The code below uses a for loop which is not a very R way of
#        doing things
titles <- NULL
for (i in 1:nrow(data.combine)) {
titles <- c(titles, extractTitle(data.combine[i,"Name"]))
}
data.combine$title <- as.factor(titles)
str(data.combine)
# Since we only have survived lables for the train set, only use the
# first 891 rows
ggplot(data.combine[1:891,], aes(x = title, fill = Survived)) +
stat_count(width = 0.5) +
facet_wrap(~Pclass) +
ggtitle("Pclass") +
xlab("Title") +
ylab("Total Count") +
labs(fill = "Survived")
library(ggplot2)
rm(list = ls())
setwd("D:\\R\\Intro to R/Video 2/")
train <- read.csv(file = "train.csv", header = TRUE, stringsAsFactors = TRUE)
test <- read.csv(file = "test.csv", header = TRUE, stringsAsFactors = TRUE)
train <- read.csv(file = "../Video 1/train.csv", header = TRUE, stringsAsFactors = TRUE)
test <- read.csv(file = "../Video 1/test.csv", header = TRUE, stringsAsFactors = TRUE)
survived <- rep("None", nrow(test))
test <- as.data.frame(append(test, list(Survived = survived), after = 1))
rm(survived)
data.combine <- rbind(train, test)
data.combine <- rbind(train, test)
data.combine$Survived <- factor(data.combine$Survived)
data.combine$Pclass <- as.factor(data.combine$Pclass)
str(data.combine)
table(data.combine$Survived)
table(data.combine$Pclass)
train$Pclass <- factor(train$Pclass)
ggplot(train, aes(x = Pclass, fill = factor(Survived))) +
geom_bar(width = 0.5) +
xlab("Pclass") +
ylab("Total count") +
labs(fill = "Survived")
str(train)
head(as.character(train$Name))
length(unique(as.character(data.combine$Name)))
# Two duplicate names, take a closer look
# First, get the duplicate names and store them as a vector
dup.names <- as.character(data.combine[which(duplicated(as.character(data.combine$Name))), "Name"])
dup.names
data.combine[which(data.combine$Name %in% dup.names),]
library(stringr)
# Any correlation with other variables (e.g., sibsp)?
misses <- data.combine[which(str_detect(data.combine$Name, "Miss.")),]
misses[1:5,]
# Hypothesis - Name titles correlate with age
mrses <- data.combine[which(str_detect(data.combine$Name, "Mrs.")), ]
mrses[1:5,]
# Check out males to see if pattern continues
males <- data.combine[which(train$Sex == "male"), ]
males[1:5,]
extractTitle <- function(name) {
name <- as.character(name)
if (length(grep("Miss.", name)) > 0) {
return ("Miss.")
} else if (length(grep("Master.", name)) > 0) {
return ("Master.")
} else if (length(grep("Mrs.", name)) > 0) {
return ("Mrs.")
} else if (length(grep("Mr.", name)) > 0) {
return ("Mr.")
} else {
return ("Other")
}
}
titles <- NULL
for (i in 1:nrow(data.combine)) {
titles <- c(titles, extractTitle(data.combine[i,"Name"]))
}
data.combine$title <- as.factor(titles)
str(data.combine)
ggplot(data.combine[1:891,], aes(x = title, fill = Survived)) +
stat_count(width = 0.5) +
facet_wrap(~Pclass) +
ggtitle("Pclass") +
xlab("Title") +
ylab("Total Count") +
labs(fill = "Survived")
ggplot(data.combine[1:1309,], aes(x = title, fill = Survived)) +
stat_count(width = 0.5) +
facet_wrap(~Pclass) +
ggtitle("Pclass") +
xlab("Title") +
ylab("Total Count") +
labs(fill = "Survived")
ggplot(data.combine[1:891,], aes(x = title, fill = Survived)) +
stat_count(width = 0.5) +
facet_wrap(~Pclass) +
ggtitle("Pclass") +
xlab("Title") +
ylab("Total Count") +
labs(fill = "Survived")
source('D:/R/Intro to R/Video 2/titanic.R')
ggplot(data.combine[1:891,], aes(x = title, fill = Survived)) +
stat_count(width = 0.5) +
facet_wrap(~Pclass) +
ggtitle("Pclass") +
xlab("Title") +
ylab("Total Count") +
labs(fill = "Survived")
save.image("D:/R/Intro to R/Video 2/sss.RData")
savehistory("D:/R/Intro to R/Video 2/sss.Rhistory")
setwd("D:\\R\\studio workspace/")
BseSensex <- read.csv(file = "BSEDatas/SENSEX.csv", stringsAsFactors = F)
BseSensex$Date<- as.Date.character(BseSensex$Date, format = '%d-%b-%y')
day <- weekdays(as.Date(BseSensex$Date))
BseSensex <- as.data.frame(append(BseSensex, list(Day = day), after = 1))
rm(day)
dt <- as.Date(BseSensex$Date[nrow(BseSensex)])
dt0030days <- dt - as.difftime(30, unit="days")
BseSensex0030 <- BseSensex[BseSensex$Date >= dt0030days
& BseSensex$Date <= dt,]
plot(BseSensex0030$Date, BseSensex0030$Close, type = "l",
ylab = "Close", las=1, xlab = "Years", main = "BSE Index 30 Days")
qplot(x =BseSensex0030$Date, y = (BseSensex0030$Close)/2)
dailyForcast <- ts(BseSensex0030$Close,start=c(2016,12,07),frequency=40.25)
dailyForcast
plot.ts(dailyForcast)
rm(dailyForcast)
rm(list = ls())
load("D:/R/Intro to R/Video 2/sss.RData")
library(ggplot2)
rm(list = ls())
setwd("D:\\R\\Intro to R/Video 2/")
train <- read.csv(file = "../Video 1/train.csv", header = TRUE, stringsAsFactors = TRUE)
test <- read.csv(file = "../Video 1/test.csv", header = TRUE, stringsAsFactors = TRUE)
# Note :- Created the survived as List of All the data in test data frame
survived <- rep("None", nrow(test))
# Append the Survived Column as there is new column PassengerId is there on first
# column in train and test data frame.
test <- as.data.frame(append(test, list(Survived = survived), after = 1))
rm(survived)
data.combine <- rbind(train, test)
data.combine$Survived <- factor(data.combine$Survived)
data.combine$Pclass <- as.factor(data.combine$Pclass)
str(data.combine)
table(data.combine$Survived)
table(data.combine$Pclass)
train$Pclass <- factor(train$Pclass)
?ggplot
ggplot(train, aes(x = Pclass, fill = factor(Survived))) +
geom_bar(width = 0.5) +
xlab("Pclass") +
ylab("Total count") +
labs(fill = "Survived")
# Examine the first few names in the training data set
str(train)
head(as.character(train$Name))
# How many unique names are there across both train & test?
length(unique(as.character(data.combine$Name)))
# Two duplicate names, take a closer look
# First, get the duplicate names and store them as a vector
dup.names <- as.character(data.combine[which(duplicated(as.character(data.combine$Name))), "Name"])
dup.names
# Next, take a look at the records in the combined data set
data.combine[which(data.combine$Name %in% dup.names),]
# What is up with the 'Miss.' and 'Mr.' thing?
library(stringr)
# Any correlation with other variables (e.g., sibsp)?
misses <- data.combine[which(str_detect(data.combine$Name, "Miss.")),]
misses[1:5,]
# Hypothesis - Name titles correlate with age
mrses <- data.combine[which(str_detect(data.combine$Name, "Mrs.")), ]
mrses[1:5,]
# Check out males to see if pattern continues
males <- data.combine[which(train$Sex == "male"), ]
males[1:5,]
# Expand upon the realtionship between `Survived` and `Pclass` by adding the new `Title` variable to the
# data set and then explore a potential 3-dimensional relationship.
# Create a utility function to help with title extraction
# NOTE - Using the grep function here, but could have used the str_detect function as well.
extractTitle <- function(name) {
name <- as.character(name)
if (length(grep("Miss.", name)) > 0) {
return ("Miss.")
} else if (length(grep("Master.", name)) > 0) {
return ("Master.")
} else if (length(grep("Mrs.", name)) > 0) {
return ("Mrs.")
} else if (length(grep("Mr.", name)) > 0) {
return ("Mr.")
} else {
return ("Other")
}
}
# NOTE - The code below uses a for loop which is not a very R way of
#        doing things
titles <- NULL
for (i in 1:nrow(data.combine)) {
titles <- c(titles, extractTitle(data.combine[i,"Name"]))
}
data.combine$title <- as.factor(titles)
str(data.combine)
# Since we only have survived lables for the train set, only use the
# first 891 rows
ggplot(data.combine[1:891,], aes(x = title, fill = Survived)) +
stat_count(width = 0.5) +
facet_wrap(~Pclass) +
ggtitle("Pclass") +
xlab("Title") +
ylab("Total Count") +
labs(fill = "Survived")
# Video 2
table(data.combine$Sex)
ggplot(data.combined[1:891,], aes(x = sex, fill = survived)) +
stat_count(width = 0.5) +
facet_wrap(~pclass) +
ggtitle("Pclass") +
xlab("Sex") +
ylab("Total Count") +
labs(fill = "Survived")
ggplot(data.combine[1:891,], aes(x = Sex, fill = Survived)) +
stat_count(width = 0.5) +
facet_wrap(~Pclass) +
ggtitle("Pclass") +
xlab("Sex") +
ylab("Total Count") +
labs(fill = "Survived")
summary(data.combined$age)
summary(data.combined[1:891,"age"])
summary(data.combine$Age)
summary(data.combine[1:891,"age"])
summary(data.combine$Age)
summary(data.combine[1:891,"age"])
summary(data.combine$Age)
ggplot(data.combine[1:891,], aes(x = Age, fill = Survived)) +
facet_wrap(~Sex + Pclass) +
geom_histogram(binwidth = 10) +
xlab("Age") +
ylab("Total Count")
ggplot(data.combine[1:891,], aes(x = Age, fill = Survived)) +
facet_wrap(~Sex + Pclass) +
geom_histogram(binwidth = 10) +
xlab("Age") +
ylab("Total Count")
ggplot(data.combine[1:891,], aes(x = Sex, fill = Survived)) +
stat_count(width = 0.5) +
facet_wrap(~Pclass) +
ggtitle("Pclass") +
xlab("Sex") +
ylab("Total Count") +
labs(fill = "Survived")
summary(train[1:891,"age"])
summary(train[1:891,"Age"])
plot(data.combine[1:891,], aes(x = Age, fill = Survived)) +
facet_wrap(~Sex + Pclass) +
geom_histogram(binwidth = 10) +
xlab("Age") +
ylab("Total Count")
ggplot(data.combine[1:891,], aes(x = Age, fill = Survived)) +
facet_wrap(~Sex + Pclass) +
geom_histogram(binwidth = 10) +
xlab("Age") +
ylab("Total Count")
boys <- data.combine[which(data.combine$Title == "Master."),]
summary(boys$age)
misses <- data.combined[which(data.combined$title == "Miss."),]
summary(misses$age)
misses <- data.combine[which(data.combine$Title == "Miss."),]
summary(misses$age)
boys <- data.combine[which(data.combine$Title == "Master."),]
summary(boys$Age)
# We know that "Miss." is more complicated, let's examine further
misses <- data.combine[which(data.combine$Title == "Miss."),]
summary(misses$Age)
boys <- data.combine[which(data.combine$Title == "Master."),]
summary(boys$Age)
which(data.combine$Title == "Master.")
boys <- data.combine[which(data.combine$title == "Master."),]
summary(boys$Age)
misses <- data.combine[which(data.combine$title == "Miss."),]
summary(misses$Age)
ggplot(misses[misses$Survived != "None",], aes(x = Age, fill = Survived)) +
facet_wrap(~Pclass) +
geom_histogram(binwidth = 5) +
ggtitle("Age for 'Miss.' by Pclass") +
xlab("Age") +
ylab("Total Count")
ggplot(boys[boys$Survived != "None",], aes(x = Age, fill = Survived)) +
facet_wrap(~Pclass) +
geom_histogram(binwidth = 5) +
ggtitle("Age for 'Master.' by Pclass") +
xlab("Age") +
ylab("Total Count")
misses.alone <- misses[which(misses$Sibsp == 0 & misses$Parch == 0),]
summary(misses.alone$age)
summary(misses.alone$Age)
which(misses$SibSp == 0 & misses$Parch == 0)
misses.alone <- misses[which(misses$SibSp == 0 & misses$Parch == 0),]
misses.alone
Age
misses.alone$Age
summary(misses.alone$Age)
length(which(misses.alone$Age <= 14.5))
summary(data.combine$SibSp)
length(unique(data.combine$Sibsp))
source('D:/R/Intro to R/Video 2/titanic.R', echo=TRUE)
data.combine$Sibsp
length(unique(data.combine$Sibsp))
data.combine
load("D:/R/Intro to R/Video 2/.RData")
misses.alone <- misses[which(misses$SibSp == 0 & misses$Parch == 0),]
summary(misses.alone$Age)
length(which(misses.alone$Age <= 14.5))
summary(data.combine$SibSp)
length(unique(data.combine$SibSp))
data.combine$SibSp <- as.factor(data.combine$SibSp)
ggplot(data.combine[1:891,], aes(x = SibSp, fill = Survived)) +
stat_count(width = 1) +
facet_wrap(~Pclass + title) +
ggtitle("Pclass, Title") +
xlab("SibSp") +
ylab("Total Count") +
ylim(0,300) +
labs(fill = "Survived")
data.combine$Parch <- as.factor(data.combine$Parch)
ggplot(data.combine[1:891,], aes(x = Parch, fill = Survived)) +
stat_count(width = 1) +
facet_wrap(~Pclass + title) +
ggtitle("Pclass, Title") +
xlab("ParCh") +
ylab("Total Count") +
ylim(0,300) +
labs(fill = "Survived")
length(unique(data.combine$SibSp))
data.combine$SibSp <- as.factor(data.combine$SibSp)
summary(data.combine$SibSp)
summary(data.combine$SibSp)
data.combine$SibSp
length(unique(data.combine$SibSp))
ggplot(data.combine[1:891,], aes(x = SibSp, fill = Survived)) +
stat_count(width = 1) +
facet_wrap(~Pclass + title) +
ggtitle("Pclass, Title") +
xlab("SibSp") +
ylab("Total Count") +
ylim(0,300) +
labs(fill = "Survived")
data.combine$Parch
data.combine$Parch <- as.factor(data.combine$Parch)
source('D:/R/Intro to R/Video 2/titanic.R', echo=TRUE)
load("D:/R/Intro to R/Video 2/.RData")
source('D:/R/Intro to R/Video 2/titanic.R', echo=TRUE)
load("D:/R/Intro to R/Video 2/.RData")
ggplot(data.combine[1:891,], aes(x = Parch, fill = Survived)) +
stat_count(width = 1) +
facet_wrap(~Pclass + title) +
ggtitle("Pclass, Title") +
xlab("ParCh") +
ylab("Total Count") +
ylim(0,300) +
labs(fill = "Survived")
temp.sibsp <- c(train$SibSp, test$sibSp)
temp.parch <- c(train$Parch, test$Parch)
temp.sibsp
temp.parch
data.combine$family.size <- as.factor(temp.sibsp + temp.parch + 1)
temp.sibsp <- c(train$SibSp, test$sibSp)
temp.parch <- c(train$Parch, test$Parch)
data.combine$family.size <- as.factor(temp.sibsp + temp.parch + 1)
temp.sibsp <- c(train$SibSp, test$sibSp)
temp.sibsp
temp.parch <- c(train$Parch, test$Parch)
temp.parch
temp
temp.sibsp
temp.parch
source('D:/R/Intro to R/Video 2/titanic.R', echo=TRUE)
load("D:/R/Intro to R/Video 2/.RData")
ggplot(data.combine[1:891,], aes(x = family.size, fill = Survived)) +
stat_count(width = 1) +
facet_wrap(~Pclass + title) +
ggtitle("Pclass, Title") +
xlab("family.size") +
ylab("Total Count") +
ylim(0,300) +
labs(fill = "Survived")
temp.sibsp <- c(train$SibSp, test$sibSp)
temp.parch <- c(train$Parch, test$Parch)
temp.sibsp <- c(train$SibSp, test$SibSp)
temp.parch <- c(train$Parch, test$Parch)
data.combine$family.size <- as.factor(temp.sibsp + temp.parch + 1)
ggplot(data.combine[1:891,], aes(x = family.size, fill = Survived)) +
stat_count(width = 1) +
facet_wrap(~Pclass + title) +
ggtitle("Pclass, Title") +
xlab("family.size") +
ylab("Total Count") +
ylim(0,300) +
labs(fill = "Survived")
View(data.combine)
save.image("D:/R/Intro to R/Video 2/.RData")
View(data.combine)
save.image("D:/R/Intro to R/Video 2/.RData")
